import React, { useState, useEffect } from "react";
import axios from "axios";

const INVENTORY_API_URL = "http://localhost:4000/api/inventory"; // API t·ªìn kho
const IMPORT_API_URL = "http://localhost:4000/api/inventory/import"; // API nh·∫≠p h√†ng
const SYNC_API_URL = "http://localhost:4000/api/inventory/syncInventory"; // API ƒë·ªìng b·ªô

export default function InventoryUI() {
    const [inventory, setInventory] = useState([]);
    const [productId, setProductId] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [stockInfo, setStockInfo] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState("");

    useEffect(() => {
        fetchInventory();

        // T·ª± ƒë·ªông ƒë·ªìng b·ªô m·ªói 5 ph√∫t (300000 ms)
        const interval = setInterval(() => {
            syncInventory();
        }, 5 * 60 * 1000);

        return () => clearInterval(interval);
    }, []);

    // üü¢ L·∫•y danh s√°ch t·ªìn kho t·ª´ Inventory Service
    const fetchInventory = async () => {
        try {
            setLoading(true);
            const res = await axios.get(INVENTORY_API_URL);
            setInventory(res.data);
            console.log("Data l·∫•y ƒë∆∞·ª£c t·ª´ inventory:", res.data);
        } catch (err) {
            setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch t·ªìn kho");
        } finally {
            setLoading(false);
        }
    };

    // üü† Ki·ªÉm tra t·ªìn kho (d√πng d·ªØ li·ªáu ƒë√£ c√≥ trong state)
    const checkStock = () => {
        if (!productId) {
            setError("Vui l√≤ng ch·ªçn s·∫£n ph·∫©m");
            return;
        }
        const item = inventory.find((p) => p.productId === productId);
        setStockInfo(item ? { inStock: item.stock > 0, quantity: item.stock } : null);
    };

    // üü¢ Nh·∫≠p h√†ng
    const handleImportStock = async () => {
        if (!productId || quantity <= 0) {
            setError("Vui l√≤ng ch·ªçn s·∫£n ph·∫©m v√† nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá");
            return;
        }
        try {
            setLoading(true);
            await axios.post(IMPORT_API_URL, { productId, quantity });
            // Sau khi nh·∫≠p h√†ng, c·∫≠p nh·∫≠t l·∫°i danh s√°ch t·ªìn kho
            fetchInventory();
            setQuantity(0)
        } catch (err) {
            setError("L·ªói khi nh·∫≠p h√†ng");
        } finally {
            setLoading(false);
        }
    };

    // üîÑ ƒê·ªìng b·ªô d·ªØ li·ªáu Inventory v·ªõi Product Service
    const syncInventory = async () => {
        try {
            setLoading(true);
            await axios.post(SYNC_API_URL);
            fetchInventory();
        } catch (err) {
            setError("L·ªói khi ƒë·ªìng b·ªô Inventory");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="p-4 max-w-xl mx-auto">
            <h1 className="text-2xl font-bold mb-4 text-center">Qu·∫£n l√Ω Kho</h1>

            {error && <p className="text-red-500">{error}</p>}
            {loading && <p className="text-blue-500">ƒêang t·∫£i...</p>}

            {/* B·∫°n c√≥ th·ªÉ gi·ªØ n√∫t ƒë·ªìng b·ªô cho ng∆∞·ªùi d√πng n·∫øu mu·ªën, nh∆∞ng vi·ªác t·ª± ƒë·ªông ƒë·ªìng b·ªô ƒë√£ ƒë·∫£m b·∫£o c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n */}
            <button onClick={syncInventory} className="bg-yellow-500 text-white p-2 w-full mb-4">
                ƒê·ªìng b·ªô Inventory üîÑ
            </button>

            {/* Dropdown ch·ªçn s·∫£n ph·∫©m */}
            <select
                value={productId}
                onChange={(e) => setProductId(e.target.value)}
                className="border p-2 w-full mb-2"
            >
                <option value="">Ch·ªçn s·∫£n ph·∫©m</option>
                {inventory.map((item) => (
                    <option key={item.productId} value={item.productId}>
                        {item.productId} - {item.name} (T·ªìn kho: {item.stock})
                    </option>
                ))}
            </select>

            <input
                type="number"
                placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng"
                value={quantity}
                onChange={(e) => setQuantity(Number(e.target.value))}
                className="border p-2 w-full mb-2"
            />

            <div className="flex flex-wrap gap-2">
                <button onClick={checkStock} className="bg-blue-500 text-white p-2 w-1/2">
                    Ki·ªÉm tra t·ªìn kho
                </button>
                <button onClick={handleImportStock} className="bg-green-500 text-white p-2 w-1/2">
                    Nh·∫≠p h√†ng
                </button>
            </div>

            {stockInfo && (
                <div className="mt-4 p-2 border">
                    <p>
                        <strong>T·ªìn kho:</strong> {stockInfo.quantity} s·∫£n ph·∫©m
                    </p>
                    {!stockInfo.inStock && <p className="text-red-500">‚ö† H·∫øt h√†ng</p>}
                </div>
            )}

            {/* Danh s√°ch t·ªìn kho */}
            <h2 className="text-xl font-bold mt-4">Danh s√°ch t·ªìn kho</h2>
            <ul className="border p-2">
                {inventory.map((item) => (
                    <li key={item.productId} className="border-b p-1">
                        <span className="font-bold">{item.name}</span> - {item.stock} s·∫£n ph·∫©m trong kho
                        {item.stock < 10 && <span className="text-red-500 ml-2">‚ö† C·∫£nh b√°o: T·ªìn kho th·∫•p</span>}
                    </li>
                ))}
            </ul>
        </div>
    );
}
