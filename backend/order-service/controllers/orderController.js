const Order = require("../models/Order");
const axios = require("axios");

const CART_API_URL = "http://localhost:4003/api/cart";
const INVENTORY_API = "http://localhost:4000/api/inventory";
const PRODUCT_SERVICE_URLImport = "http://localhost:4004/api/product";
// üìå T·∫°o ƒë∆°n h√†ng
exports.createOrder = async (req, res) => {
    try {
        const { userId, customer, items, shipping, payment, finalTotal, notes } = req.body;

        if (!userId || !customer || !items || items.length === 0) {
            return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
        }

        // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ Inventory
        const productIds = items.map(item => item.productId);
        const { data: inventoryData } = await axios.post(`${INVENTORY_API}/bulk`, { productIds });

        if (!inventoryData || inventoryData.length === 0) {
            return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho" });
        }

        // Ki·ªÉm tra t·ªìn kho
        for (let item of items) {
            const invItem = inventoryData.find(i => i.productId.toString() === item.productId.toString());
            if (!invItem || invItem.stock < item.quantity) {
                return res.status(400).json({ message: `S·∫£n ph·∫©m ${item.name} kh√¥ng ƒë·ªß h√†ng` });
            }
        }

        // X√°c nh·∫≠n tr·ª´ s·ªë l∆∞·ª£ng trong kho
        const confirmRes = await axios.post(`${INVENTORY_API}/confirm`, { items });
        if (!confirmRes.data.success) {
            return res.status(400).json({ message: "X√°c nh·∫≠n t·ªìn kho th·∫•t b·∫°i" });
        }

        // T·∫°o ƒë∆°n h√†ng
        const order = new Order({
            userId,
            customer,
            items,
            shipping,
            payment,
            finalTotal,
            notes
        });
        await order.save();

        // X√≥a gi·ªè h√†ng c·ªßa user sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        await axios.delete(`${CART_API_URL}/clear/${userId}`);

        res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o", order });
    } catch (error) {
        console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå L·∫•y ƒë∆°n h√†ng theo ID
exports.getOrderById = async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId).populate("userId");
        if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
        res.json(order);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
exports.getOrdersByUser = async (req, res) => {
    try {
        const { userId } = req.params;
        const orders = await Order.find({ userId });
        res.json(orders);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (Admin)
exports.getAllOrders = async (req, res) => {
    try {
        const orders = await Order.find({}).populate("userId");
        res.json(orders);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå C·∫≠p nh·∫≠t ƒë∆°n h√†ng (Admin)
// Cho ph√©p c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng nh∆∞ status, shipping, payment, sellerNote,...
exports.updateOrder = async (req, res) => {
    try {
        const { orderId } = req.params;
        const updateData = req.body; // V√≠ d·ª•: { status: "completed", shipping: { ... }, payment: { ... } }
        const order = await Order.findByIdAndUpdate(orderId, updateData, { new: true });
        if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });
        res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", order });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

// üìå H·ªßy ƒë∆°n h√†ng
exports.cancelOrder = async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId);
        if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });

        // Cho ph√©p h·ªßy n·∫øu ƒë∆°n h√†ng ch∆∞a ƒë∆∞·ª£c x√°c nh·∫≠n (status l√† "pending")
        if (order.status !== "pending") {
            return res.status(400).json({ message: "Ch·ªâ ƒë∆°n h√†ng ch∆∞a x√°c nh·∫≠n m·ªõi c√≥ th·ªÉ h·ªßy" });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "cancelled"
        order.status = "cancelled";
        await order.save();

        // G·ªçi API Inventory ƒë·ªÉ ho√†n tr·∫£ s·ªë l∆∞·ª£ng h√†ng v·ªÅ kho
        await axios.post(`${INVENTORY_API}/release`, { items: order.items });

        res.json({ message: "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy", order });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};
 
// üìå H·ªßy ƒë∆°n h√†ng b·ªüi Admin (kh√¥ng r√†ng bu·ªôc tr·∫°ng th√°i)
// exports.adminCancelOrder = async (req, res) => {
//     try {
//         const { orderId } = req.params;
//         const order = await Order.findById(orderId);
//         if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });

//         // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "cancelled"
//         order.status = "cancelled";
//         await order.save();

//         // Duy·ªát qua t·ª´ng m·∫∑t h√†ng v√† restore stock trong Inventory Service
//         for (const item of order.items) {
//             try {
//                 // G·ªçi API restore ƒë·ªÉ c·ªông l·∫°i s·ªë l∆∞·ª£ng v√†o t·ªìn kho
//                 await axios.put(`${INVENTORY_API}/restore`, {
//                     productId: item.productId.toString(),
//                     quantity: item.quantity
//                 });
//                 // Sau ƒë√≥, ƒë·ªìng b·ªô l·∫°i stock ·ªü Product Service
//                 const invRes = await axios.get(`${INVENTORY_API}/product/${item.productId.toString()}`);
//                 if (invRes.data) {
//                     await axios.put(`${PRODUCT_SERVICE_URLImport}/${item.productId.toString()}`, {
//                         stock: invRes.data.quantity
//                     });
//                 }
//             } catch (err) {
//                 console.error(`L·ªói khi restore stock cho s·∫£n ph·∫©m ${item.productId.toString()}:`, err.response?.data || err.message);
//             }
//         }

//         res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªüi Admin v√† t·ªìn kho ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c", order });
//     } catch (error) {
//         console.error("L·ªói trong adminCancelOrder:", error.message);
//         res.status(500).json({ message: "L·ªói server", error: error.message });
//     }
// };

exports.adminCancelOrder = async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId);
        if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "cancelled"
        order.status = "cancelled";
        await order.save();

        // Duy·ªát qua t·ª´ng m·∫∑t h√†ng v√† restore stock cho t·ª´ng s·∫£n ph·∫©m
        for (const item of order.items) {
            try {
                // G·ªçi API restore c·ªßa Inventory Service ƒë·ªÉ c·ªông th√™m s·ªë l∆∞·ª£ng
                await axios.put(`${INVENTORY_API}/restore`, {
                    productId: item.productId.toString(),
                    quantity: item.quantity
                });
                // Sau ƒë√≥, l·∫•y d·ªØ li·ªáu m·ªõi t·ª´ Inventory qua endpoint GET /product/:productId
                const invRes = await axios.get(`${INVENTORY_API}/product/${item.productId.toString()}`);
                if (invRes.data) {
                    // C·∫≠p nh·∫≠t l·∫°i stock trong Product Service d·ª±a tr√™n s·ªë li·ªáu m·ªõi t·ª´ Inventory
                    await axios.put(`${PRODUCT_SERVICE_URLImport}/${item.productId.toString()}`, {
                        stock: invRes.data.quantity
                    });
                }
            } catch (err) {
                console.error(
                    `L·ªói khi restore stock cho s·∫£n ph·∫©m ${item.productId.toString()}:`,
                    err.response?.data || err.message
                );
            }
        }

        res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªüi Admin; t·ªìn kho v√† Product Service ƒë√£ ƒë∆∞·ª£c restore", order });
    } catch (error) {
        console.error("L·ªói trong adminCancelOrder:", error.message);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};








// üìå X√≥a ƒë∆°n h√†ng b·ªüi Admin (AdminDeleteOrder)
// L∆∞u √Ω: Tr∆∞·ªõc khi x√≥a, n·∫øu ƒë∆°n h√†ng ch∆∞a b·ªã h·ªßy, b·∫°n c√≥ th·ªÉ g·ªçi API Inventory ƒë·ªÉ ho√†n tr·∫£ h√†ng v·ªÅ kho.
exports.adminDeleteOrder = async (req, res) => {
    try {
        const { orderId } = req.params;
        const order = await Order.findById(orderId);
        if (!order) return res.status(404).json({ message: "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i" });

        // N·∫øu ƒë∆°n h√†ng ch∆∞a b·ªã h·ªßy, th·ª±c hi·ªán ho√†n tr·∫£ h√†ng v·ªÅ kho
        if (order.status !== "cancelled") {
            try {
                const releaseRes = await axios.post(`${INVENTORY_API}/release`, { items: order.items });
                if (!releaseRes.data.success) {
                    return res.status(400).json({ message: "Ho√†n tr·∫£ h√†ng v·ªÅ kho th·∫•t b·∫°i" });
                }
            } catch (err) {
                console.error("L·ªói khi g·ªçi API release:", err.message);
                return res.status(500).json({ message: "L·ªói khi ho√†n tr·∫£ h√†ng v·ªÅ kho", error: err.message });
            }
        }

        // X√≥a ƒë∆°n h√†ng kh·ªèi CSDL
        await Order.findByIdAndDelete(orderId);
        res.json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a b·ªüi Admin" });
    } catch (error) {
        console.error("L·ªói trong adminDeleteOrder:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
};

