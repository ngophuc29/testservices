const Inventory =require("../models/InventoryModels");
const axios = require("axios");

// URL c·ªßa Product Service (ƒë·ªïi n·∫øu c·∫ßn)
const PRODUCT_SERVICE_URL = "http://localhost:4004/api/products";
const PRODUCT_SERVICE_URLImport = "http://localhost:4004/api/product";

const LOW_STOCK_THRESHOLD = 5; // Ng∆∞·ª°ng c·∫£nh b√°o t·ªìn kho th·∫•p

// 1Ô∏è‚É£ API l·∫•y to√†n b·ªô s·∫£n ph·∫©m t·ª´ Product Service (ƒë·ªÉ ki·ªÉm tra stock)
exports.getAllProducts = async (req, res) => {
    try {
        const response = await axios.get(PRODUCT_SERVICE_URL);
        const products = response.data.data;

        if (!Array.isArray(products)) {
            return res.status(500).json({
                message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ Product Service",
                receivedData: response.data
            });
        }

        res.json(products);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m", error: error.message });
    }
};

// 2Ô∏è‚É£ API l·∫•y danh s√°ch t·ªìn kho t·ª´ Product Service
exports.getInventory = async (req, res) => {
    try {
        const response = await axios.get(PRODUCT_SERVICE_URL);
        const products = response.data.data;

        const inventoryWithWarning = products.map(product => ({
            productId: product._id,
            name:product.name,
            stock: product.stock,
            lowStock: product.stock <= LOW_STOCK_THRESHOLD
        }));

        res.json(inventoryWithWarning);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y t·ªìn kho", error: error.message });
    }
};

// 3Ô∏è‚É£ API l·∫•y stock theo danh s√°ch productId
exports.getStockByProductIds = async (req, res) => {
    try {
        const { productIds } = req.body;
        if (!Array.isArray(productIds)) {
            return res.status(400).json({ message: "Danh s√°ch productIds kh√¥ng h·ª£p l·ªá" });
        }

        const response = await axios.get(PRODUCT_SERVICE_URL);
        const products = response.data.data.filter(product => productIds.includes(product._id));

        res.json(products.map(p => ({ productId: p._id, stock: p.stock })));
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y t·ªìn kho theo danh s√°ch", error: error.message });
    }
};

// 4Ô∏è‚É£ API ki·ªÉm tra s·∫£n ph·∫©m c√≤n h√†ng kh√¥ng (truy v·∫•n Product Service)
exports.getProductStock = async (req, res) => {
    try {
        const response = await axios.get(`${PRODUCT_SERVICE_URLImport}/${req.params.productId}`);
        const product = response.data;

        if (!product) {
            return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
        }

        res.json({ inStock: product.stock > 0, stock: product.stock });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi ki·ªÉm tra t·ªìn kho", error: error.message });
    }
};

// 5Ô∏è‚É£ API th·ªëng k√™ t·ªïng s·ªë l∆∞·ª£ng h√†ng t·ªìn kho t·ª´ Product Service
exports.getStockStats = async (req, res) => {
    try {
        const response = await axios.get(PRODUCT_SERVICE_URL);
        const products = response.data.data;

        const totalStock = products.reduce((sum, product) => sum + product.stock, 0);

        res.json({ totalStock });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi th·ªëng k√™ t·ªìn kho", error: error.message });
    }
};
// 6Ô∏è‚É£ API nh·∫≠p h√†ng - tƒÉng stock trong Product Service
exports.importStock = async (req, res) => {
    try {
        const { productId, quantity } = req.body;

        if (!productId || quantity <= 0) {
            return res.status(400).json({ message: "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
        }

        console.log("üìå Nh·∫≠p h√†ng cho Product ID:", productId);

        // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ Product Service
        const productResponse = await axios.get(`${PRODUCT_SERVICE_URLImport}/${productId}`);
        console.log("üîç D·ªØ li·ªáu s·∫£n ph·∫©m nh·∫≠n ƒë∆∞·ª£c:", productResponse.data);

        const product = productResponse.data;

        if (!product || product.stock == null) {
            return res.status(404).json({ message: "‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c thi·∫øu stock" });
        }

        // Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu `stock`
        if (typeof product.stock !== "number") {
            console.error("üö® L·ªói: stock kh√¥ng ph·∫£i l√† s·ªë", product);
            return res.status(500).json({ message: "‚ùå stock kh√¥ng h·ª£p l·ªá", stockType: typeof product.stock });
        }

        // TƒÉng stock
        const newStock = product.stock + quantity;
        console.log("üìå Stock m·ªõi:", newStock);

        // C·∫≠p nh·∫≠t stock trong Product Service
        const updateResponse = await axios.put(`${PRODUCT_SERVICE_URLImport}/${productId}`, {
            stock: newStock
        });

        console.log("üîÑ K·∫øt qu·∫£ c·∫≠p nh·∫≠t:", updateResponse.data);

        if (!updateResponse.data.data || updateResponse.data.data.stock == null) {
            return res.status(500).json({ message: "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t stock" });
        }

        res.status(200).json({
            message: "‚úÖ Nh·∫≠p h√†ng th√†nh c√¥ng!",
            newStock: updateResponse.data.data.stock
        });
    } catch (error) {
        console.error("üö® L·ªói nh·∫≠p h√†ng:", error.response?.data || error.message);
        res.status(500).json({
            message: "‚ùå L·ªói server khi nh·∫≠p h√†ng",
            error: error.message
        });
    }
};


exports.syncInventory = async (req, res) => {
    try {
        console.log("üîÑ ƒêang ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ Product Service...");
        const response = await axios.get(PRODUCT_SERVICE_URL);
        const products = response.data.data;

        if (!Array.isArray(products)) {
            return res.status(500).json({ message: "D·ªØ li·ªáu t·ª´ Product Service kh√¥ng h·ª£p l·ªá." });
        }

        // Duy·ªát danh s√°ch s·∫£n ph·∫©m v√† c·∫≠p nh·∫≠t v√†o Inventory Service
        for (const product of products) {
            await Inventory.findOneAndUpdate(
                { productId: product._id ,name: product.name },
                { quantity: product.stock, updatedAt: new Date() },
                { upsert: true, new: true }
            );
        }

        console.log("‚úÖ ƒê·ªìng b·ªô d·ªØ li·ªáu th√†nh c√¥ng!");
        res.json({ message: "ƒê·ªìng b·ªô d·ªØ li·ªáu th√†nh c√¥ng!" });
    } catch (error) {
        console.error("üö® L·ªói khi ƒë·ªìng b·ªô Inventory:", error.message);
        res.status(500).json({ message: "L·ªói server khi ƒë·ªìng b·ªô Inventory", error: error.message });
    }
};